apply plugin: 'java-library'

group = 'etri'
version = '1.0'

sourceSets {
	main {
		java {
			srcDirs = ['src.api', 'src.transport', 'src.rpc']
		}
	}
}

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

ext {
//	slf4j_version = '1.7.32'
	log4j_version = '1.2.17'
//	guava_version = '30.1.1-jre'
//	rxjava2_version = '2.2.21'
//	picocli_version = '3.9.6'
//	
//	cglib_version = '3.3.0'
//	commons_io_version = '2.11.0'
//	commons_text_version = '1.8'
//	
//	junit_version = '4.13.2'
//	mockito_version = '3.12.4'
//	hamcrest_version = '1.3'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(':utils')
	implementation project(':event')
	
	implementation "log4j:log4j:${log4j_version}"
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						if ( entry.path.startsWith("src/test/") ) {
							entry.output = 'test_classes'
						}
						else {
							entry.output = 'classes'
						}
					}
				}
			}
		}
	}
}